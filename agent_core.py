import sys
import io
from langchain.agents import initialize_agent, AgentType, AgentExecutor
from langchain.tools import Tool
from langchain_google_genai import ChatGoogleGenerativeAI

# Import the tool functions from the new file
from agent_tools import (
    tool_analyze_query_and_map_subjects,
    tool_get_urls_from_notion_by_topics,
    tool_get_relevant_articles_from_homepage,
    tool_get_article_paragraphs,
    tool_answer_question_with_llm_and_urls
)


def run_agent_executor(user_query: str, NOTION_DATABASE_ID: str) -> str:
    """
    Initializes and runs the agent with the user's query.

    Args:
        user_query (str): The question from the user.
        NOTION_DATABASE_ID (str): The ID of the Notion database.

    Returns:
        str: The final answer generated by the agent.
    """
    try:
        # Define the tools
        tools = [
            Tool(
                name="AnalyzeQueryAndMapSubjects",  # New combined tool
                func=tool_analyze_query_and_map_subjects,
                description="Analyzes a user query to extract relevant keywords and map it to subject categories. "
                            "Input should be a string: 'user_query ||| comma_separated_list_of_available_types'. "
                            "Example: 'What are the latest tech innovations? ||| sport,news,science,tech,economy'. "
                            "Returns a formatted string: 'Keywords: [comma-separated-keywords or None] ||| Subjects: [comma-separated-subjects or None]'."
            ),
            Tool(
                name="GetUrlsFromNotionByTopics",
                func=tool_get_urls_from_notion_by_topics,
                description=(
                    f"Retrieves website URLs from the Notion database (ID: {NOTION_DATABASE_ID}) based on topics. "
                    f"Input should be a string: '{NOTION_DATABASE_ID}|||comma_separated_topics_list'. "
                    f"Example: '{NOTION_DATABASE_ID}|||sport,news'. "
                    "Returns a newline-separated string of URLs or 'No URLs found'.")
            ),
            Tool(
                name="GetRelevantArticlesFromHomepage",
                func=tool_get_relevant_articles_from_homepage,
                description="Searches a given homepage URL for articles relevant to provided keywords. "
                            "It scrapes the homepage and immediately filters article links based on keywords "
                            "found in their titles or URLs. "
                            "Input should be a string: 'homepage_url|||comma_separated_keywords'. "
                            "Example: 'https://www.engadget.com/|||Galaxy Z fold 7,Samsung'. "
                            "Returns a newline-separated string of 'Title: [title] | URL: [url]' for each relevant article, "
                            "or 'No relevant articles found on this homepage.'."
            ),
            Tool(
                name="GetArticleParagraphs",
                func=tool_get_article_paragraphs,
                description="Fetches an article's full content (H1, H2, and paragraphs) from a given URL. "
                            "Input should be a single string representing the article URL. "
                            "Example: 'https://www.ynet.co.il/news/article/blabla123'. "
                            "Returns a formatted string: 'H1 Title: [H1 Title] ||| H2 Subtitle: [H2 Subtitle] ||| Content: [Paragraphs]', "
                            "or an error message."
            ),
            Tool(
                name="AnswerQuestionWithLLMAndUrls",
                func=tool_answer_question_with_llm_and_urls,
                description="Generates a concise answer to a user's question based on provided article content and URLs. "
                            "Input format: 'user_question|||newline_separated_processed_articles_data'. "
                            "Each processed article data entry must be: 'Original Title: [title] | H1 Title: [H1] | H2 Subtitle: [H2] | URL: [URL] | Content: [Content]'. "
                            "Returns a paragraph answer including relevant URLs, or an indication of no relevant info."
            )
        ]

        llm = ChatGoogleGenerativeAI(model="gemini-2.0-flash", temperature=0.7)
        agent_executor = initialize_agent(
            tools,
            llm,
            agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,
            verbose=True,
            handle_parsing_errors=True
        )

        main_agent_instruction = (
            f"You are an AI assistant tasked with answering questions by gathering information. "
            f"Your goal is to answer the question: '{user_query}'. "
            f"Follow these steps: "
            f"1. Analyze the user's question to extract keywords and map it to relevant subject categories "
            f"   from the list: 'sport,news,science,tech,economy' using the 'AnalyzeQueryAndMapSubjects' tool. "
            f"   The tool will return a string like 'Keywords: [keywords] ||| Subjects: [subjects]'. "
            f"2. Use the identified subjects from the previous step to fetch relevant website URLs from the Notion database "
            f"   using the 'GetUrlsFromNotionByTopics' tool. "
            f"   (The 'GetUrlsFromNotionByTopics' tool's input format requires the Notion database ID as the first part). "
            f"3. For each found website URL, use the 'GetRelevantArticlesFromHomepage' tool with the extracted keywords "
            f"   (from step 1) to find relevant articles directly from that homepage. "
            f"4. Select up to 3-5 of the most relevant filtered articles and extract their full content "
            f"   (H1, H2, paragraphs) using 'GetArticleParagraphs'. "
            f"5. Finally, use all gathered article content and their original URLs to provide a concise answer "
            f"   to the user's question, including source URLs, using 'AnswerQuestionWithLLMAndUrls'."
        )

        # Create an in-memory text buffer to capture the verbose output
        old_stdout = sys.stdout
        sys.stdout = captured_output = io.StringIO()

        try:
            final_answer_dict = agent_executor.invoke({
                "input": main_agent_instruction
            })
            final_answer = final_answer_dict.get('output', 'Agent did not return a clear output.')
            agent_thoughts = captured_output.getvalue()
        finally:
            # Restore the original stdout
            sys.stdout = old_stdout

        return final_answer, agent_thoughts

    except Exception as e:
        raise RuntimeError(f"An error occurred in the agent execution: {e}")

